<?php
/**
 * Plugin Name: JSON to GitHub Sync with Minified Posts (Local Save Version)
 * Description: Fetch all posts with selected fields from WP REST API, minify JSON, and save to local file on post save/update or manual trigger.
 * Version: 1.5
 * Author: Mamun Miah
 */

// Admin settings menu (optional, you can keep or remove JSON URL if unused)
add_action('admin_menu', function () {
    add_options_page(
        'JSON to GitHub Sync',
        'JSON to GitHub Sync',
        'manage_options',
        'json-to-github-sync',
        'json_to_github_settings_page'
    );
});

// Register settings (you can keep or remove 'json_to_github_url' if unused)
add_action('admin_init', function () {
    register_setting('json_to_github_settings', 'json_to_github_url');
});

// Handle manual generate button POST
add_action('admin_init', function () {
    if (
        isset($_POST['json_to_github_generate_now']) &&
        check_admin_referer('json_to_github_generate_action', 'json_to_github_generate_nonce') &&
        current_user_can('manage_options')
    ) {
        $result = json_to_github_generate_json_file();

        if ($result === true) {
            add_action('admin_notices', function () {
                echo '<div class="notice notice-success is-dismissible"><p>posts.json generated successfully.</p></div>';
            });
        } else {
            add_action('admin_notices', function () use ($result) {
                echo '<div class="notice notice-error is-dismissible"><p>Failed to generate posts.json: ' . esc_html($result) . '</p></div>';
            });
        }
    }
});

// Settings page HTML with manual generate button
function json_to_github_settings_page() {
    ?>
    <div class="wrap">
        <h1>JSON to GitHub Sync Settings (Local Save Version)</h1>
        <form method="post" action="options.php">
            <?php settings_fields('json_to_github_settings'); ?>
            <?php do_settings_sections('json_to_github_settings'); ?>
            <table class="form-table">
                <tr>
                    <th scope="row">Website URL (without query params)</th>
                    <td><input type="text" name="json_to_github_url" value="<?php echo esc_attr(get_option('json_to_github_url')); ?>" class="regular-text" placeholder="https://your-site.com/wp-json/wp/v2/posts" /></td>
                </tr>
            </table>
            <?php submit_button(); ?>
        </form>

        <hr/>

        <form method="post">
            <?php
            wp_nonce_field('json_to_github_generate_action', 'json_to_github_generate_nonce');
            ?>
            <input type="submit" name="json_to_github_generate_now" class="button button-primary" value="Generate posts.json Now" />
        </form>
    </div>
    <?php
}

// Helper: fetch featured image URL from media API URL fallback
function fetch_featured_image_url_from_media_link($media_api_url) {
    if (empty($media_api_url)) return '';

    $response = wp_remote_get($media_api_url);
    if (is_wp_error($response)) return '';

    $media_json = json_decode(wp_remote_retrieve_body($response), true);
    if (!empty($media_json['guid']['rendered'])) {
        return $media_json['guid']['rendered'];
    }

    return '';
}

// Fetch all posts with _embed and paginate through all posts
function fetch_all_posts_minified($base_url) {
    $all_posts = [];
    $page = 1;
    $per_page = 100;

    while (true) {
        $url = add_query_arg([
            'per_page' => $per_page,
            'page' => $page,
            '_embed' => 'author,wp:featuredmedia,wp:term',
        ], $base_url);

        $response = wp_remote_get($url);

        if (is_wp_error($response)) {
            error_log('WP Remote get error: ' . $response->get_error_message());
            break;
        }

        $posts = json_decode(wp_remote_retrieve_body($response), true);
        if (empty($posts) || !is_array($posts)) break;

        foreach ($posts as $post) {
            $featured_image = '';

            // Try embedded featured media source_url first
            if (!empty($post['_embedded']['wp:featuredmedia'][0]['source_url'])) {
                $featured_image = $post['_embedded']['wp:featuredmedia'][0]['source_url'];
            }
            // Fallback: fetch media URL from media API endpoint
            elseif (!empty($post['_links']['wp:featuredmedia'][0]['href'])) {
                $featured_image = fetch_featured_image_url_from_media_link($post['_links']['wp:featuredmedia'][0]['href']);
            }

            $minified_post = [
                'id'            => $post['id'],
                'slug'          => $post['slug'] ?? '',
                'date'          => $post['date'],
                'modified'      => $post['modified'],
                'author'        => $post['_embedded']['author'][0]['name'] ?? '',
                'title'         => $post['title']['rendered'] ?? '',
                'content'       => $post['content']['rendered'] ?? '',
                'featured_image'=> $featured_image,
                'excerpt'       => $post['excerpt']['rendered'] ?? '',
                'categories'    => [],
                'status'        => $post['status'] ?? '',
            ];

            // Extract category names if available
            if (!empty($post['_embedded']['wp:term'][0])) {
                foreach ($post['_embedded']['wp:term'][0] as $category) {
                    if (isset($category['name'])) {
                        $minified_post['categories'][] = $category['name'];
                    }
                }
            }

            $all_posts[] = $minified_post;
        }

        if (count($posts) < $per_page) break;
        $page++;
    }

    // Return minified JSON (compact, no whitespace)
    return json_encode($all_posts);
}

// Save minified JSON locally on post save/update
function json_to_github_auto_upload($post_ID, $post, $update) {
    if (wp_is_post_revision($post_ID) || wp_is_post_autosave($post_ID)) return;
    if ($post->post_type !== 'post') return;
    if (!in_array($post->post_status, ['publish', 'future'])) return;

    json_to_github_generate_json_file();
}

// Function to generate and save posts.json, returns true or error string
function json_to_github_generate_json_file() {
    $json_url = get_option('json_to_github_url');

    if (!$json_url) {
        return 'JSON URL not set in settings.';
    }

    $json_data = fetch_all_posts_minified($json_url);
    if (!$json_data) {
        return 'Failed to fetch or encode JSON data.';
    }

    $upload_path = ABSPATH . 'posts.json';

    $written = file_put_contents($upload_path, $json_data);

    if ($written === false) {
        return 'Failed to write posts.json to root folder.';
    }

    return true;
}

add_action('save_post', 'json_to_github_auto_upload', 10, 3);
